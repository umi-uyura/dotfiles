#!/bin/sh

#
# My update constant
#

TAG_SOFTWAREUPDATE="macapp"
TAG_DOTFILES="dotfiles"
TAG_DOTEMACS="dotemacs"
TAG_BIST="bist"
TAG_EMACSCASK="emacscask"
TAG_HOMEBREWS="homebrews"
TAG_ANYENV="anyenv"
TAG_NODE="node"
TAG_RUBYGEMS="rubygems"
TAG_PYTHON="pip"
TAG_VAGRANT="vagrant"
TAGS=($TAG_SOFTWAREUPDATE $TAG_DOTFILES $TAG_DOTEMACS $TAG_BIST $TAG_EMACSCASK $TAG_HOMEBREWS $TAG_ANYENV $TAG_NODE $TAG_RUBYGEMS $TAG_PYTHON $TAG_VAGRANT)

#
# My update function
#

function usage()
{
  cat << EOF
My update routine
usage : $CMDNAME [option]
   -u : upgrade the app there is updates
        skip process, specify under tags
EOF

  for tag in "${TAGS[@]}"
  do
    echo "          ${tag}"
  done

  cat << EOF
   -h : show usage
EOF
}

function skiptag()
{
  SKIPTAGARRAY=(`echo $SKIPTAG | tr -s ',' ' '`)

  for arg in "${SKIPTAGARRAY[@]}"
  do
    if [ "${arg}" = "$1" ]; then
      return 0
    fi
  done

  return 1
}


#
# My update routine
#

while getopts :hu: OPT
do
  case $OPT in
    u) echo "-u"
       UPGRADE=0
       SKIPTAG=$OPTARG
       ;;
    h) usage
       exit 1
       ;;
    :) if [ "u" = "$OPTARG" ]; then
         UPGRADE=0
         break
       fi
       echo "ERROR $OPTARG"
       exit 1
       ;;
    \?) usage
       exit 1
       ;;
  esac
done

#
# Software update
#
skiptag "${TAG_SOFTWAREUPDATE}"
SKIP_SOFTWAREUPDATE=$?

if [ 0 -ne $SKIP_SOFTWAREUPDATE ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating Software updates ..."
    echo
    softwareupdate -i -a
  else
    echo
    echo "### Checking for Software updates ..."
    echo
    softwareupdate -l
  fi
fi

#
# dotfiles
#
skiptag "${TAG_DOTFILES}"
SKIP_DOTFILES=$?

# if [ 0 -ne $SKIP_DOTFILES ]; then
if false; then
  echo
  echo "### Checking for dotfiles updates ..."
  echo
  git -C ~/dotfiles remote show origin | grep 'pushes to master'
fi

#
# .emacs.d
#
skiptag "${TAG_DOTEMACS}"
SKIP_DOTEMACS=$?

# if [ 0 -ne $SKIP_DOTEMACS ]; then
if false; then
  echo
  echo "### Checking for .emacs.d updates ..."
  echo
  git -C ~/.emacs.d remote show origin | grep 'pushes to master'
fi

#
# bist
#
skiptag "${TAG_BIST}"
SKIP_BIST=$?

if [ 0 -ne $SKIP_BIST ]; then
  echo
  echo "### Updating bist..."
  echo
  bist update
  bist rehash
fi

#
# Emacs Cask
#
skiptag "${TAG_EMACSCASK}"
SKIP_EMACSCASK=$?

if [ 0 -ne $SKIP_EMACSCASK ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating Emacs casks ..."
    echo
    cask update --path ~/.emacs.d/
  else
    echo
    echo "### Checking for Emacs casks updates..."
    echo
    cask outdated --path ~/.emacs.d/
  fi
fi

#
# Homebrew & Homebrew Cask
#
skiptag "${TAG_HOMEBREWS}"
SKIP_HOMEBREWS=$?

if [ 0 -ne $SKIP_HOMEBREWS ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating Homebrew and Homebrew Cask ..."
    echo
    brew upgrade
    brew upgrade --cask
  else
    echo
    echo "### Checking for Homebrew and Homebrew Cask updates ..."
    echo
    brew outdated
    brew cask outdated
  fi
fi

#
# anyenv
#
skiptag "${TAG_ANYENV}"
SKIP_ANYENV=$?

if [ 0 -ne $SKIP_ANYENV ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating anyenv ..."
    echo
    anyenv update
  fi
fi

#
# Node packages
#
skiptag "${TAG_NODE}"
SKIP_NODE=$?

if [ 0 -ne $SKIP_NODE ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating NPM ..."
    echo
    npm install -g npm
    nodenv rehash

    echo
    echo "### Updating Node packages ..."
    echo
    npm update -g
    nodenv rehash
  else
    echo
    echo "### Checking for Node package updates ..."
    echo
    ncu -g
  fi
fi

#
# Rubygems
#
skiptag "${TAG_RUBYGEMS}"
SKIP_RUBYGEMS=$?

if [ 0 -ne $SKIP_RUBYGEMS ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating Rubygems ..."
    echo
    update_rubygems
    gem update
    gem clean
    rbenv rehash
  else
    echo
    echo "### Checking for Rubygem updates ..."
    echo
    gem outdated
  fi
fi

#
# Python pip
#
skiptag "${TAG_PYTHON}"
SKIP_PYTHON=$?

if [ 0 -ne $SKIP_PYTHON ]; then
  if [ $UPGRADE ]; then
    echo
    echo "### Updating Python pakcages ..."
    echo
    # pip list --outdated --format=freeze | awk -F"==" '{print $1}' | xargs pip install -U
    pip list --outdated --format=freeze | awk -F"==" '{print $1}' | xargs echo
  else
    echo
    echo "### Checking for Python package updates ..."
    echo
    pip list --outdated
  fi
fi

#
# Vagrant plugins
#
skiptag "${TAG_VAGRANT}"
SKIP_VAGRANT=$?

if [ 0 -ne $SKIP_VAGRANT ]; then
  echo
  echo "### Updating vagrant plugins ..."
  echo
  vagrant plugin update
fi
